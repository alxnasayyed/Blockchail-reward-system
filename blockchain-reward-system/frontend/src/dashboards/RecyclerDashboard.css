import { useState, useEffect } from "react";
import { ethers } from "ethers";
import { getContract } from "../contract";
import "../styles/RecyclerDashboard.css";
import { FaClipboardList, FaFileAlt, FaEye, FaChartBar } from "react-icons/fa";

const RecyclerDashboard = () => {
  const [walletAddress, setWalletAddress] = useState("");
  const [userId, setUserId] = useState("RECYCLER_USER_ID");

  // ‚úÖ Connect Wallet
  const connectWallet = async () => {
    if (window.ethereum) {
      try {
        const accounts = await window.ethereum.request({ method: "eth_requestAccounts" });
        if (!accounts.length) {
          alert("‚ùå No accounts returned from MetaMask.");
          return;
        }

        const provider = new ethers.BrowserProvider(window.ethereum);
        const signer = await provider.getSigner();
        const address = await signer.getAddress();

        setWalletAddress(address);

        const response = await fetch("http://localhost:5000/api/auth/update-wallet/recycler", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ userId, wallet: address }),
        });

        if (!response.ok) throw new Error("‚ùå Failed to update wallet on backend.");

        console.log("‚úÖ Wallet connected:", address);
        alert(`‚úÖ Wallet connected: ${address}`);
      } catch (error) {
        console.error("‚ùå Wallet connection failed:", error);
        alert("‚ùå Wallet connection failed. Please try again.");
      }
    } else {
      alert("‚ùå MetaMask not detected! Please install it.");
    }
  };

  // ‚úÖ Reward User
  const rewardUser = async (address, amount) => {
    try {
      if (!address || !amount) {
        alert("‚ùå Please enter valid user address and amount.");
        return;
      }

      const contract = await getContract();
      if (!contract) return;

      const tx = await contract.rewardRecycler(address, ethers.parseUnits(amount, 18));
      await tx.wait();

      alert(`‚úÖ Successfully rewarded ${amount} tokens to: ${address}`);
    } catch (error) {
      console.error("‚ùå Error rewarding user:", error);
      alert("‚ùå Failed to reward user. Ensure you are connected and have sufficient permissions.");
    }
  };

  // ‚úÖ Fetch Wallet
  useEffect(() => {
    const fetchWallet = async () => {
      try {
        const res = await fetch(`http://localhost:5000/api/auth/recycler?userId=${userId}`);
        if (!res.ok) throw new Error("‚ùå Failed to fetch wallet address.");

        const data = await res.json();
        if (data.walletAddress) setWalletAddress(data.walletAddress);
      } catch (error) {
        console.error(error);
      }
    };

    fetchWallet();
  }, [userId]);

  return (
    <div className="recycler-dashboard-container">
      <h2>Recycler Dashboard</h2>

      {/* ‚úÖ Wallet Buttons */}
      <div className="recycler-dashboard-buttons">
        <button className="dashboard-btn" onClick={connectWallet}>
          üîó Connect MetaMask
        </button>
        <button className="dashboard-btn" onClick={() => rewardUser(prompt("Enter User Address"),prompt("Enter Amount"))
          }
        >
          üéÅ Reward User
        </button>
      </div>


      <p>Wallet: {walletAddress || "‚ùå Not Connected"}</p>

      {/* ‚úÖ Dashboard Cards */}
      <div className="recycler-dashboard-cards">
        {/* View Pickups */}
        <div
          className="recycler-dashboard-card"
          style={{ backgroundImage: "url('/images/vp.jpg')" }}
        >
          <div className="card-overlay">
            <div className="card-icon"><FaClipboardList /></div>
            <div className="card-content">
              <h3>View Pickups</h3>
              <p>See scheduled pickups.</p>
            </div>
          </div>
        </div>

        {/* Generate Recycle Report */}
        <div
          className="recycler-dashboard-card"
          style={{ backgroundImage: "url('/images/grr.jpg')" }}
        >
          <div className="card-overlay">
            <div className="card-icon"><FaFileAlt /></div>
            <div className="card-content">
              <h3>Generate Recycle Report</h3>
              <p>Download recycling data.</p>
            </div>
          </div>
        </div>

        {/* Monitor Recycle */}
        <div
          className="recycler-dashboard-card"
          style={{ backgroundImage: "url('/images/mr.jpg')" }}
        >
          <div className="card-overlay">
            <div className="card-icon"><FaEye /></div>
            <div className="card-content">
              <h3>Monitor Recycle</h3>
              <p>Track recycling process.</p>
            </div>
          </div>
        </div>

        {/* Recycle Stats */}
        <div
          className="recycler-dashboard-card"
          style={{ backgroundImage: "url('/images/rs.jpg')" }}
        >
          <div className="card-overlay">
            <div className="card-icon"><FaChartBar /></div>
            <div className="card-content">
              <h3>Recycle Stats</h3>
              <p>View performance analytics.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RecyclerDashboard;
